// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortURL_CreateCompressedUrl_FullMethodName    = "/proto.ShortURL/CreateCompressedUrl"
	ShortURL_GetFullUrlByCompressed_FullMethodName = "/proto.ShortURL/GetFullUrlByCompressed"
)

// ShortURLClient is the client API for ShortURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortURLClient interface {
	CreateCompressedUrl(ctx context.Context, in *CreateCompressedUrlRequest, opts ...grpc.CallOption) (*CreateCompressedUrlResponse, error)
	GetFullUrlByCompressed(ctx context.Context, in *GetFullUrlByCompressedRequest, opts ...grpc.CallOption) (*GetFullUrlByCompressedResponse, error)
}

type shortURLClient struct {
	cc grpc.ClientConnInterface
}

func NewShortURLClient(cc grpc.ClientConnInterface) ShortURLClient {
	return &shortURLClient{cc}
}

func (c *shortURLClient) CreateCompressedUrl(ctx context.Context, in *CreateCompressedUrlRequest, opts ...grpc.CallOption) (*CreateCompressedUrlResponse, error) {
	out := new(CreateCompressedUrlResponse)
	err := c.cc.Invoke(ctx, ShortURL_CreateCompressedUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) GetFullUrlByCompressed(ctx context.Context, in *GetFullUrlByCompressedRequest, opts ...grpc.CallOption) (*GetFullUrlByCompressedResponse, error) {
	out := new(GetFullUrlByCompressedResponse)
	err := c.cc.Invoke(ctx, ShortURL_GetFullUrlByCompressed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLServer is the server API for ShortURL service.
// All implementations must embed UnimplementedShortURLServer
// for forward compatibility
type ShortURLServer interface {
	CreateCompressedUrl(context.Context, *CreateCompressedUrlRequest) (*CreateCompressedUrlResponse, error)
	GetFullUrlByCompressed(context.Context, *GetFullUrlByCompressedRequest) (*GetFullUrlByCompressedResponse, error)
	mustEmbedUnimplementedShortURLServer()
}

// UnimplementedShortURLServer must be embedded to have forward compatible implementations.
type UnimplementedShortURLServer struct {
}

func (UnimplementedShortURLServer) CreateCompressedUrl(context.Context, *CreateCompressedUrlRequest) (*CreateCompressedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompressedUrl not implemented")
}
func (UnimplementedShortURLServer) GetFullUrlByCompressed(context.Context, *GetFullUrlByCompressedRequest) (*GetFullUrlByCompressedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullUrlByCompressed not implemented")
}
func (UnimplementedShortURLServer) mustEmbedUnimplementedShortURLServer() {}

// UnsafeShortURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortURLServer will
// result in compilation errors.
type UnsafeShortURLServer interface {
	mustEmbedUnimplementedShortURLServer()
}

func RegisterShortURLServer(s grpc.ServiceRegistrar, srv ShortURLServer) {
	s.RegisterService(&ShortURL_ServiceDesc, srv)
}

func _ShortURL_CreateCompressedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompressedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).CreateCompressedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_CreateCompressedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).CreateCompressedUrl(ctx, req.(*CreateCompressedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_GetFullUrlByCompressed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullUrlByCompressedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).GetFullUrlByCompressed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_GetFullUrlByCompressed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).GetFullUrlByCompressed(ctx, req.(*GetFullUrlByCompressedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortURL_ServiceDesc is the grpc.ServiceDesc for ShortURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShortURL",
	HandlerType: (*ShortURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompressedUrl",
			Handler:    _ShortURL_CreateCompressedUrl_Handler,
		},
		{
			MethodName: "GetFullUrlByCompressed",
			Handler:    _ShortURL_GetFullUrlByCompressed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
